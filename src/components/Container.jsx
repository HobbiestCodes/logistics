/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 container.glb 
*/

import React, { useRef } from 'react'
import { useGLTF, PerspectiveCamera, useScroll } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

export function Container(props) {
  const ref = useRef();
  const data = useScroll()
  useFrame(() => {
    ref.current.rotation.y = data.offset * -0.75
    // ref.current.rotation.z = data.offset * 0.75
    ref.current.position.x = data.offset * 4.9
    ref.current.position.z = data.offset * 4.3
    ref.current.position.y = data.offset * 2.89
    // camref.current.fov = 20
    



  })
  const { nodes, materials } = useGLTF('/container.glb')
  return (
    <group {...props} dispose={null}>
      <PerspectiveCamera makeDefault={true} far={100} near={0.1} fov={22} position={[7.205, 4.3, 6.863]} rotation={[-0.627, 0.71, 0.441]} />
      {/* <directionalLight intensity={1} position={[0, 1, 0]} />
      <directionalLight intensity={1} position={[1, 0, 0]} />
      <directionalLight intensity={1} position={[0, 0, 1]} /> */}
        <pointLight intensity={5} decay={1} color={'white'} position={[12, 2, 4.439]} rotation={[10.418, -1.072, -1.398]} scale={10.87} />
      <directionalLight intensity={1} position={[-4.747, 3.452, -0.439]} rotation={[-1.418, -1.072, -1.398]} scale={10.87} />
      <directionalLight intensity={2} position={[2, -2.822, -4.176]} rotation={[-3.113, 1.035, 3.117]} scale={13.955} />
      <directionalLight intensity={1} position={[-2, 2.822, 3.176]} rotation={[-3.113, 1.035, 3.117]} scale={13.955} />
     
      {/* <spotLight intensity={10} angle={Math.PI / 9} penumbra={1} decay={2} position={[3 ,2, 1]} rotation={[-Math.PI / 2, 0, 0]} /> */}
      <group position={[-0.034, 0.715, 0.07]} rotation={[0, -0.432, 0]} scale={[1.321, 1.275, 1.728]} ref={ref}>
        <mesh geometry={nodes.Cylinder020.geometry} material={materials.metal} />
        <mesh geometry={nodes.Cylinder020_1.geometry} material={materials.yellow} />
      </group>
    </group>
  )
}

useGLTF.preload('/container.glb')
